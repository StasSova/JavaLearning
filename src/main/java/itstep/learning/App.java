package itstep.learning;

import itstep.learning.oop.OopDemo;

/**
 * Hello world!
 */
public class App {
    public static void main(String[] args) {
//        new Basics().run();
        new OopDemo().run();
    }
}
/*
 * ----------------- FILE SYSTEM -------------------
 * В Java структура файловой системы тесно связана с организацией кода:
 * - package (аналог namespace) соответствует директории (папке): itstep.learning -> itstep/learning.
 * - Класс = файл: каждый класс должен находиться в отдельном файле с таким же именем, как и класс.
 *
 * package itstep.learning;
 * - Указывает, что класс App находится в пакете itstep.learning.
 * - Пакеты помогают организовать код и избежать конфликтов имен.
 *
 * ----------------- CASING -------------------
 * - Types: CapitalCamelCase
 * - fields/methods: loverCamelCase
 * - packages: snake_case
 *
 * ----------------- TYPES -------------------
 * - Примитивные типы данных:
 *   - byte: 8-битное целое число.
 *     byte b = -1 -> 1111 1111,
 *     [short] b -> 0000 0000 1111 1111 = 255
 *     (short) b -> 1111 1111 1111 1111 = -1
 *   - short: 16-битное целое число.
 *     short s = 1000;
 *   - int: 32-битное целое число.
 *     int i = 100000;
 *   - long: 64-битное целое число.
 *     long l = 100000L;
 *   - float: 32-битное число с плавающей точкой.
 *     float f = 10.5f;
 *   - double: 64-битное число с плавающей точкой.
 *     double d = 10.5;
 *   - char: 16-битный символ Unicode.
 *     char c = 'A';
 *   - boolean: логический тип (true или false).
 *     boolean bool = true;
 *
 * - Ссылочные типы данных:
 *   - String: строка символов.
 *     String str = "Hello";
 *   - Arrays: массивы.
 *     int[] arr = {1, 2, 3};
 *   - Classes: пользовательские классы.
 *     MyClass obj = new MyClass();
 *   - Interfaces: интерфейсы.
 *     MyInterface obj = new MyClass();
 *   - Enums: перечисления.
 *     enum Day { MONDAY, TUESDAY, WEDNESDAY };
 *
 * ----------------- BOXING -------------------
 * Boxing — это процесс автоматического преобразования
 * примитивного типа данных в соответствующий объектный тип (класс-обертку).
 * - Пример Boxing:
 *   int primitiveInt = 5;
 *   Integer boxedInt = primitiveInt; // Автоматическое преобразование int в Integer
 *
 * Unboxing — это обратный процесс, когда объектный тип преобразуется обратно в примитивный тип.
 * - Пример Unboxing:
 *   Integer boxedInt = 5;
 *   int primitiveInt = boxedInt; // Автоматическое преобразование Integer в int
 *
 * Boxing и Unboxing полезны при работе с коллекциями, которые могут
 * содержать только объекты, например, ArrayList<Integer>.
 *
 *
 * ----------------- ARRAYS -------------------
 * Массивы — это структуры данных, которые хранят фиксированное количество
 * элементов одного типа.
 * - Пример объявления массива:
 *   int[][] arr2d = {
 *           {1, 2, 3},
 *           {4, 5, 6, 7},
 *           {8, 9}
 *   };
 *   int[] numbers = {1, 2, 3, 4, 5};
 * - Доступ к элементам массива:
 *   int firstNumber = numbers[0]; // Доступ к первому элементу массива
 *
 * ----------------- COLLECTIONS -------------------
 * Коллекции — это более гибкие структуры данных, чем массивы, которые могут
 * изменять размер и содержат методы для работы с элементами.
 * - Пример использования ArrayList:
 *   ArrayList<Integer> list = new ArrayList<>();
 *   list.add(1); // Добавление элемента
 *   list.add(2);
 *   int firstElement = list.get(0); // Доступ к первому элементу
 *
 * ----------------- LOOPS -------------------
 * Циклы используются для повторного выполнения блока кода.
 * - for loop:
 *   for (int i = 0; i < 5; i++) {
 *       System.out.println(i);
 *   }
 *   int[] arr = new int[]{1, 2, 3};
 *   for (int a : arr) {
 *       System.out.print(a + " ");
 *   }
 *
 * - while loop:
 *   int i = 0;
 *   while (i < 5) {
 *       System.out.println(i);
 *       i++;
 *   }
 * - do-while loop:
 *   int i = 0;
 *   do {
 *       System.out.println(i);
 *       i++;
 *   } while (i < 5);
 *
 * ----------------- SYSTEM.OUT -------------------
 * System.out.println("Hello World!");
 *  - Выводит строку "Hello World!" на консоль.
 *  - System: встроенный класс, предоставляющий доступ к системным ресурсам.
 *  - out: статическое поле класса System, представляющее стандартный вывод.
 *  - println: метод для вывода строки с новой строки.
 *
 *  * ----------------- UNICODE -------------------
 *  Unicode — это международный стандарт кодирования символов, который позволяет
 *  представлять текст и символы из всех письменных систем мира.
 *  -   Широкий охват: Поддерживает более 143,000 символов, включая буквы, цифры,
 *      знаки препинания, математические символы, эмодзи и многое другое.
 *  -   Уникальные коды: Каждому символу присваивается уникальный код (кодовая точка),
 *      например, символ 'A' имеет код U+0041.
 *  -   Разные формы представления: Символы могут быть представлены в различных формах,
 *      таких как UTF-8, UTF-16 и UTF-32.
 *
 *  Пример использования Unicode в Java:
 *  char ch = '\u0041'; // Символ 'A'
 *  System.out.println(ch); // Выводит 'A'
 */